.TH "HELM" "1" "Aug 2018" "Auto generated by spf13/cobra" ""  ""


.SH NAME
.PP
helm\-upgrade \- upgrade a release


.SH SYNOPSIS
.PP
\fBhelm upgrade [RELEASE] [CHART] [flags]\fP


.SH DESCRIPTION
.PP
This command upgrades a release to a specified version of a chart and/or updates chart values.

.PP
Required arguments are release and chart. The chart argument can be one of:
 \- a chart reference('stable/mariadb'); use '\-\-version' and '\-\-devel' flags for versions other than latest,
 \- a path to a chart directory,
 \- a packaged chart,
 \- a fully qualified URL.

.PP
To customize the chart values, use any of
 \- '\-\-values'/'\-f' to pass in a yaml file holding settings,
 \- '\-\-set' to provide one or more key=val pairs directly,
 \- '\-\-set\-string' to provide key=val forcing val to be stored as a string,
 \- '\-\-set\-file' to provide key=path to read a single large value from a file at path.

.PP
To edit or append to the existing customized values, add the
 '\-\-reuse\-values' flag, otherwise any existing customized values are ignored.

.PP
If no chart value arguments are provided on the command line, any existing customized values are carried
forward. If you want to revert to just the values provided in the chart, use the '\-\-reset\-values' flag.

.PP
You can specify any of the chart value flags multiple times. The priority will be given to the last
(right\-most) value specified. For example, if both myvalues.yaml and override.yaml contained a key
called 'Test', the value set in override.yaml would take precedence:

.PP
.RS

.nf
$ helm upgrade \-f myvalues.yaml \-f override.yaml redis ./redis

.fi
.RE

.PP
Note that the key name provided to the '\-\-set', '\-\-set\-string' and '\-\-set\-file' flags can reference
structure elements. Examples:
  \- mybool=TRUE
  \- livenessProbe.timeoutSeconds=10
  \- metrics.annotations[0]=hey,metrics.annotations[1]=ho

.PP
which sets the top level key mybool to true, the nested timeoutSeconds to 10, and two array values, respectively.

.PP
Note that the value side of the key=val provided to '\-\-set' and '\-\-set\-string' flags will pass through
shell evaluation followed by yaml type parsing to produce the final value. This may alter inputs with
special characters in unexpected ways, for example

.PP
.RS

.nf
$ helm upgrade \-\-set pwd=3jk$o2,z=f\\30.e redis ./redis

.fi
.RE

.PP
results in "pwd: 3jk" and "z: f30.e". Use single quotes to avoid shell evaluation and argument delimiters,
and use backslash to escape yaml special characters:

.PP
.RS

.nf
$ helm upgrade \-\-set pwd='3jk$o2z=f\\\\30.e' redis ./redis

.fi
.RE

.PP
which results in the expected "pwd: 3jk$o2z=f\\30.e". If a single quote occurs in your value then follow
your shell convention for escaping it; for example in bash:

.PP
.RS

.nf
$ helm upgrade \-\-set pwd='3jk$o2z=f\\\\30with'\\''quote'

.fi
.RE

.PP
which results in "pwd: 3jk$o2z=f\\30with'quote".


.SH OPTIONS
.PP
\fB\-\-ca\-file\fP=""
    verify certificates of HTTPS\-enabled servers using this CA bundle

.PP
\fB\-\-cert\-file\fP=""
    identify HTTPS client using this SSL certificate file

.PP
\fB\-\-description\fP=""
    specify the description to use for the upgrade, rather than the default

.PP
\fB\-\-devel\fP[=false]
    use development versions, too. Equivalent to version '>0.0.0\-0'. If \-\-version is set, this is ignored.

.PP
\fB\-\-dry\-run\fP[=false]
    simulate an upgrade

.PP
\fB\-\-force\fP[=false]
    force resource update through delete/recreate if needed

.PP
\fB\-h\fP, \fB\-\-help\fP[=false]
    help for upgrade

.PP
\fB\-i\fP, \fB\-\-install\fP[=false]
    if a release by this name doesn't already exist, run an install

.PP
\fB\-\-key\-file\fP=""
    identify HTTPS client using this SSL key file

.PP
\fB\-\-keyring\fP="/Users/grapevine/.gnupg/pubring.gpg"
    path to the keyring that contains public signing keys

.PP
\fB\-\-namespace\fP=""
    namespace to install the release into (only used if \-\-install is set). Defaults to the current kube config namespace

.PP
\fB\-\-no\-hooks\fP[=false]
    disable pre/post upgrade hooks

.PP
\fB\-\-password\fP=""
    chart repository password where to locate the requested chart

.PP
\fB\-\-recreate\-pods\fP[=false]
    performs pods restart for the resource if applicable

.PP
\fB\-\-repo\fP=""
    chart repository url where to locate the requested chart

.PP
\fB\-\-reset\-values\fP[=false]
    when upgrading, reset the values to the ones built into the chart

.PP
\fB\-\-reuse\-values\fP[=false]
    when upgrading, reuse the last release's values and merge in any overrides from the command line via \-\-set and \-f. If '\-\-reset\-values' is specified, this is ignored.

.PP
\fB\-\-set\fP=[]
    set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)

.PP
\fB\-\-set\-file\fP=[]
    set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)

.PP
\fB\-\-set\-string\fP=[]
    set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)

.PP
\fB\-\-timeout\fP=300
    time in seconds to wait for any individual Kubernetes operation (like Jobs for hooks)

.PP
\fB\-\-tls\fP[=false]
    enable TLS for request

.PP
\fB\-\-tls\-ca\-cert\fP="$HELM\_HOME/ca.pem"
    path to TLS CA certificate file

.PP
\fB\-\-tls\-cert\fP="$HELM\_HOME/cert.pem"
    path to TLS certificate file

.PP
\fB\-\-tls\-hostname\fP=""
    the server name used to verify the hostname on the returned certificates from the server

.PP
\fB\-\-tls\-key\fP="$HELM\_HOME/key.pem"
    path to TLS key file

.PP
\fB\-\-tls\-verify\fP[=false]
    enable TLS for request and verify remote

.PP
\fB\-\-username\fP=""
    chart repository username where to locate the requested chart

.PP
\fB\-f\fP, \fB\-\-values\fP=[]
    specify values in a YAML file or a URL(can specify multiple)

.PP
\fB\-\-verify\fP[=false]
    verify the provenance of the chart before upgrading

.PP
\fB\-\-version\fP=""
    specify the exact chart version to use. If this is not specified, the latest version is used

.PP
\fB\-\-wait\fP[=false]
    if set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment are in a ready state before marking the release as successful. It will wait for as long as \-\-timeout


.SH OPTIONS INHERITED FROM PARENT COMMANDS
.PP
\fB\-\-debug\fP[=false]
    enable verbose output

.PP
\fB\-\-home\fP="/Users/grapevine/.helm"
    location of your Helm config. Overrides $HELM\_HOME

.PP
\fB\-\-host\fP=""
    address of Tiller. Overrides $HELM\_HOST

.PP
\fB\-\-kube\-context\fP=""
    name of the kubeconfig context to use

.PP
\fB\-\-kubeconfig\fP=""
    absolute path to the kubeconfig file to use

.PP
\fB\-\-tiller\-connection\-timeout\fP=300
    the duration (in seconds) Helm will wait to establish a connection to tiller

.PP
\fB\-\-tiller\-namespace\fP="kube\-system"
    namespace of Tiller


.SH SEE ALSO
.PP
\fBhelm(1)\fP


.SH HISTORY
.PP
24\-Aug\-2018 Auto generated by spf13/cobra
